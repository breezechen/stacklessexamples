#summary Introduction to Stackless Examples

= An introduction for newcomers =

[http://www.stackless.com Stackless Python] is an enhanced version of the Python programming language. It allows programmers to reap the benefits of thread-based programming without the performance and complexity problems associated with conventional threads. The microthreads that Stackless adds to Python are a cheap and lightweight convenience which can if used properly, give the following benefits:

  * Improved program structure.
  * More readable code.
  * Increased programmer productivity.

= Stackless Documentation =

In the repository, you will find documentation gathered from the internet related to Stackless design, presentations and tutorials.

= Stackless Examples =

In this project we aim to have usage examples with Stackless for real life problems.

Here follows some examples for features found in Stackless Python. There are examples where only Stackless is used and pages dedicated for Stackless integration with external frameworks like [http://www.twistedmatrix.com Twisted] and [http://www.riverbankcomputing.co.uk PyQt].

== Basic Usage ==

=== Scheduling ===

This example shows the basic usage of Stackless and shows a function that combined with its manager handles sleeping tasklets.

*scheduleNormal.py* - [http://stacklessexamples.googlecode.com/svn/trunk/examples/scheduleNormal.py Download]

=== Factorial ===

Factorial example using stackless to break Python's recurtion limit of 1000

*factorial.py* - [http://stacklessexamples.googlecode.com/svn/trunk/examples/factorial.py Download]

== Threading ==

=== Scheduling and Threads ===

The Stackless scheduler is directly linked to the current thread, so if you use more than one thread, the tasklets you create on each will be local to that thread. You can see the thread-safe Sleep function independently manage the tasklets that were added on any given thread on that thread.

*threadscheduling.py* - [http://stacklessexamples.googlecode.com/svn/trunk/examples/threadscheduling.py Download]

=== Channels and Threads ===

Tasklets can work between channels regardless of which thread the tasklets belong to. This example demonstrates a shared sleep function which works on the initial main thread and handles sleeps from tasklets on both itself and an identical second spawned thread. It isn't recommended that this approach be used, as the 'preference' attribute of the channel does not work with regard to tasklets from another thread and these tasklets are always preferred being switched to immediately.

*interThreadChannels.py* - [http://stacklessexamples.googlecode.com/svn/trunk/examples/interThreadChannels.py Download]

== Channels ==

== Networking ==




